import numpy as np

from .perlin2d import interpolant


def generate_perlin_noise_3d(
        shape, res, tileable=(False, False, False),
        interpolant=interpolant
):
    """Generate a 3D numpy array of perlin noise.

    Args:
        shape: The shape of the generated array (tuple of three ints).
            This must be a multiple of res.
        res: The number of periods of noise to generate along each
            axis (tuple of three ints). Note shape must be a multiple
            of res.
        tileable: If the noise should be tileable along each axis
            (tuple of three bools). Defaults to (False, False, False).
        interpolant: The interpolation function, defaults to
            t*t*t*(t*(t*6 - 15) + 10).

    Returns:
        A numpy array of shape shape with the generated noise.

    Raises:
        ValueError: If shape is not a multiple of res.
    """
    # Gradients
    theta = 2*np.pi*np.random.rand(res[0] + 1, res[1] + 1, res[2] + 1)
    phi = 2*np.pi*np.random.rand(res[0] + 1, res[1] + 1, res[2] + 1)
    gradients = np.stack(
        (np.sin(phi)*np.cos(theta), np.sin(phi)*np.sin(theta), np.cos(phi)),
        axis=3
    )
    if tileable[0]:
        gradients[-1,:,:] = gradients[0,:,:]
    if tileable[1]:
        gradients[:,-1,:] = gradients[:,0,:]
    if tileable[2]:
        gradients[:,:,-1] = gradients[:,:,0]
    grid = np.stack(np.meshgrid(
        np.arange(0, shape[1]) * res[1] / shape[1],
        np.arange(0, shape[0]) * res[0] / shape[0],
        np.arange(0, shape[2]) * res[2] / shape[2],
    ), axis=-1)[...,[1,0,2]]
    grid_floor = np.floor(grid).astype(int)
    grid_ceil = np.ceil(grid).astype(int)
    g000 = gradients[grid_floor[...,0], grid_floor[...,1], grid_floor[...,2]]
    g100 = gradients[ grid_ceil[...,0], grid_floor[...,1], grid_floor[...,2]]
    g010 = gradients[grid_floor[...,0],  grid_ceil[...,1], grid_floor[...,2]]
    g110 = gradients[ grid_ceil[...,0],  grid_ceil[...,1], grid_floor[...,2]]
    g001 = gradients[grid_floor[...,0], grid_floor[...,1],  grid_ceil[...,2]]
    g101 = gradients[ grid_ceil[...,0], grid_floor[...,1],  grid_ceil[...,2]]
    g011 = gradients[grid_floor[...,0],  grid_ceil[...,1],  grid_ceil[...,2]]
    g111 = gradients[ grid_ceil[...,0],  grid_ceil[...,1],  grid_ceil[...,2]]
    # Ramps
    grid_frac = grid - np.floor(grid)
    n000 = np.sum(np.stack((grid_frac[:,:,:,0]  , grid_frac[:,:,:,1]  , grid_frac[:,:,:,2]  ), axis=3) * g000, 3)
    n100 = np.sum(np.stack((grid_frac[:,:,:,0]-1, grid_frac[:,:,:,1]  , grid_frac[:,:,:,2]  ), axis=3) * g100, 3)
    n010 = np.sum(np.stack((grid_frac[:,:,:,0]  , grid_frac[:,:,:,1]-1, grid_frac[:,:,:,2]  ), axis=3) * g010, 3)
    n110 = np.sum(np.stack((grid_frac[:,:,:,0]-1, grid_frac[:,:,:,1]-1, grid_frac[:,:,:,2]  ), axis=3) * g110, 3)
    n001 = np.sum(np.stack((grid_frac[:,:,:,0]  , grid_frac[:,:,:,1]  , grid_frac[:,:,:,2]-1), axis=3) * g001, 3)
    n101 = np.sum(np.stack((grid_frac[:,:,:,0]-1, grid_frac[:,:,:,1]  , grid_frac[:,:,:,2]-1), axis=3) * g101, 3)
    n011 = np.sum(np.stack((grid_frac[:,:,:,0]  , grid_frac[:,:,:,1]-1, grid_frac[:,:,:,2]-1), axis=3) * g011, 3)
    n111 = np.sum(np.stack((grid_frac[:,:,:,0]-1, grid_frac[:,:,:,1]-1, grid_frac[:,:,:,2]-1), axis=3) * g111, 3)
    # Interpolation
    t = interpolant(grid_frac)
    n00 = n000*(1-t[:,:,:,0]) + t[:,:,:,0]*n100
    n10 = n010*(1-t[:,:,:,0]) + t[:,:,:,0]*n110
    n01 = n001*(1-t[:,:,:,0]) + t[:,:,:,0]*n101
    n11 = n011*(1-t[:,:,:,0]) + t[:,:,:,0]*n111
    n0 = (1-t[:,:,:,1])*n00 + t[:,:,:,1]*n10
    n1 = (1-t[:,:,:,1])*n01 + t[:,:,:,1]*n11
    return ((1-t[:,:,:,2])*n0 + t[:,:,:,2]*n1)


def generate_fractal_noise_3d(
        shape, res, octaves=1, persistence=0.5, lacunarity=2,
        tileable=(False, False, False), interpolant=interpolant
):
    """Generate a 3D numpy array of fractal noise.

    Args:
        shape: The shape of the generated array (tuple of three ints).
            This must be a multiple of lacunarity**(octaves-1)*res.
        res: The number of periods of noise to generate along each
            axis (tuple of three ints). Note shape must be a multiple of
            (lacunarity**(octaves-1)*res).
        octaves: The number of octaves in the noise. Defaults to 1.
        persistence: The scaling factor between two octaves.
        lacunarity: The frequency factor between two octaves.
        tileable: If the noise should be tileable along each axis
            (tuple of three bools). Defaults to (False, False, False).
        interpolant: The, interpolation function, defaults to
            t*t*t*(t*(t*6 - 15) + 10).

    Returns:
        A numpy array of fractal noise and of shape shape generated by
        combining several octaves of perlin noise.

    Raises:
        ValueError: If shape is not a multiple of
            (lacunarity**(octaves-1)*res).
    """
    noise = np.zeros(shape)
    frequency = 1
    amplitude = 1
    for _ in range(octaves):
        noise += amplitude * generate_perlin_noise_3d(
            shape,
            (frequency*res[0], frequency*res[1], frequency*res[2]),
            tileable,
            interpolant
        )
        frequency *= lacunarity
        amplitude *= persistence
    return noise
